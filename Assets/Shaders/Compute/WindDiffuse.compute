// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct WindRegion
{
    float3 Coord;
    float3 Direction;
    float3 IncomingForces;
    float4 Col;
};

RWStructuredBuffer<WindRegion> regions;
float4 minColor;
float4 maxColor;
int3 dimensions;
float deltaTime;
float viscosity;
float maxMagnitude;

int CoordToIndex(int3 coord)
{
    return (coord.z * dimensions[0] * dimensions[1]) + (coord.y * dimensions[0]) + coord.x; 
}

int CoordToIndex(int x, int y, int z)
{
    return (z * dimensions[0] * dimensions[1]) + (y * dimensions[0]) + x; 
}

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint count;
    uint stride;
    regions.GetDimensions(count, stride);

    WindRegion data = regions[id.x];

    WindRegion left;
    if (data.Coord.x > 0)
        left = regions[CoordToIndex(int3(data.Coord.x - 1, data.Coord.y, data.Coord.z))];

    WindRegion right;
    if (data.Coord.x < dimensions[0])
        right = regions[CoordToIndex(int3(data.Coord.x + 1, data.Coord.y, data.Coord.z))];

    WindRegion front ;
    if (data.Coord.x < dimensions[2])
        front = regions[CoordToIndex(int3(data.Coord.x, data.Coord.y, data.Coord.z + 1))];

    WindRegion back ;
    if (data.Coord.x > 0)
        back = regions[CoordToIndex(int3(data.Coord.x, data.Coord.y, data.Coord.z - 1))];

    WindRegion top ;
    if (data.Coord.x < dimensions[1])
        top = regions[CoordToIndex(int3(data.Coord.x, data.Coord.y + 1, data.Coord.z))];

    WindRegion bottom;
    if (data.Coord.x > 0)
        bottom = regions[CoordToIndex(int3(data.Coord.x, data.Coord.y - 1, data.Coord.z))];

    ///////STEP 1 - Add Source - Motors Step?
    data.Direction += data.IncomingForces * deltaTime;

    //STEP 2 - SWAP/DIFFUSE
    float3 temp = data.Direction;
    data.Direction = data.IncomingForces;
    data.IncomingForces = temp;

    temp = left.Direction;
    left.Direction = left.IncomingForces;
    left.IncomingForces = temp;

    temp = right.Direction;
    right.Direction = right.IncomingForces;
    right.IncomingForces = temp;

    temp = top.Direction;
    top.Direction = top.IncomingForces;
    top.IncomingForces = temp;

    temp = bottom.Direction;
    bottom.Direction = bottom.IncomingForces;
    bottom.IncomingForces = temp;

    temp = front.Direction;
    front.Direction = front.IncomingForces;
    front.IncomingForces = temp;

    temp = back.Direction;
    back.Direction = back.IncomingForces;
    back.IncomingForces = temp;

    int largest = max(max(dimensions.x, dimensions.y), max(dimensions.y, dimensions.z));
    float a = deltaTime * viscosity * largest * largest * largest; 
    for(int k = 0; k < 10; k++)
    {
        data.Direction = (data.IncomingForces + a * (left.Direction + right.Direction + top.Direction + bottom.Direction + front.Direction + back.Direction)) / (1 + 6 * a);
    }

    //STEP 3 - PROJECT
    float h = 1.0/dimensions.x;
    for (int z = 1; z <= dimensions.z; z++)
    {
        for (int y = 1; y <= dimensions.y; y++)
        {
            for (int x = 1; x <= dimensions.x; x++)
            {
                data.IncomingForces.y = -1./3. * ((right.Direction.x - left.Direction.x) / dimensions.x + (top.Direction.y - bottom.Direction.y) / dimensions.x + (front.Direction.z - back.Direction.z) / dimensions.x);
                data.IncomingForces.x = 0.0;
            }
        }
    }

    for(int k = 0; k < 20; k++)
    {
        data.IncomingForces.x = (data.IncomingForces.y + (left.IncomingForces.x + right.IncomingForces.x + top.IncomingForces.x + bottom.IncomingForces.x + front.IncomingForces.x + back.IncomingForces.x)) / (6);
    }

    for (int z = 1; z <= dimensions.z; z++)
    {
        for (int y = 1; y <= dimensions.y; y++)
        {
            for (int x = 1; x <= dimensions.x; x++)
            {
                data.Direction.x -= 0.5 * dimensions.x * (right.IncomingForces.x - left.IncomingForces.x);
                data.Direction.y -= 0.5 * dimensions.y * (top.IncomingForces.x - bottom.IncomingForces.x);
                data.Direction.z -= 0.5 * dimensions.z * (front.IncomingForces.x - back.IncomingForces.x);
            }
        }
    }

    //STEP 4 - SWAP/ADVECT
    temp = data.Direction;
    data.Direction = data.IncomingForces;
    data.IncomingForces = temp;

    temp = left.Direction;
    left.Direction = left.IncomingForces;
    left.IncomingForces = temp;

    temp = right.Direction;
    right.Direction = right.IncomingForces;
    right.IncomingForces = temp;

    temp = top.Direction;
    top.Direction = top.IncomingForces;
    top.IncomingForces = temp;

    temp = bottom.Direction;
    bottom.Direction = bottom.IncomingForces;
    bottom.IncomingForces = temp;

    temp = front.Direction;
    front.Direction = front.IncomingForces;
    front.IncomingForces = temp;

    temp = back.Direction;
    back.Direction = back.IncomingForces;
    back.IncomingForces = temp;
    
    //ADVECT

    float dt = deltaTime * max(max(dimensions.x, dimensions.y), max(dimensions.y, dimensions.z));
    float tX, tY, tZ;
    int iX, iY, iZ, iX1, iY1, iZ1;
    float s0,s1, t0, t1, u0, u1;
    for (int z = 1; z <= dimensions.z; z++)
    {
        for (int y = 1; y <= dimensions.y; y++)
        {
            for (int x = 1; x <= dimensions.x; x++)
            {
                tX = x - dt * data.IncomingForces.x;
                tY = y - dt * data.IncomingForces.y;
                tZ = z - dt * data.IncomingForces.z;

                if (tX < 0.5) tX = 0.5;
                if (tX > dimensions.x + 0.5) tX = dimensions.x + 0.5;
                iX = (int)tX;
                iX1 = iX + 1;

                if (tY < 0.5) tY = 0.5;
                if (tY > dimensions.y + 0.5) tY = dimensions.y + 0.5;
                iY = (int)tY;
                iY1 = iY + 1;

                if (tZ < 0.5) tZ = 0.5;
                if (tZ > dimensions.z + 0.5) tZ = dimensions.z + 0.5;
                iZ = (int)tZ;
                iZ1 = iZ + 1;

                s1 = tX - iX; s0 = 1 - s1;
                t1 = tY - iY; t0 = 1 - t1;
                u1 = tZ - iZ; u0 = 1 - u1;

                data.IncomingForces = s0 * (t0 * u0 * regions[CoordToIndex(iX,iY,iZ)].IncomingForces + t1 * u0 * regions[CoordToIndex(iX,iY1,iZ)].IncomingForces +
                t0 * u1 * regions[CoordToIndex(iX,iY,iZ1)].IncomingForces + t1 * u1 * regions[CoordToIndex(iX,iY1,iZ1)].IncomingForces) +
                s1 * (t0 * u0 * regions[CoordToIndex(iX1,iY,iZ)].IncomingForces + t1 * u0 * regions[CoordToIndex(iX1,iY1,iZ)].IncomingForces + 
                t0 * u1 * regions[CoordToIndex(iX1,iY,iZ1)].IncomingForces + t1 * u1 * regions[CoordToIndex(iX1,iY1,iZ1)].IncomingForces);

                //data.IncomingForces = s0 * (t0 * u0 * regions[CoordToIndex(iX,iY,iZ)].Direction + t1 * u0 * regions[CoordToIndex(iX,iY1,iZ)].Direction +
                //t0 * u1 * regions[CoordToIndex(iX,iY,iZ1)].Direction + t1 * u1 * regions[CoordToIndex(iX,iY1,iZ1)].Direction) +
                //s1 * (t0 * u0 * regions[CoordToIndex(iX1,iY,iZ)].Direction + t1 * u0 * regions[CoordToIndex(iX1,iY1,iZ)].Direction + 
                //t0 * u1 * regions[CoordToIndex(iX1,iY,iZ1)].Direction + t1 * u1 * regions[CoordToIndex(iX1,iY1,iZ1)].Direction);
            }
        }
    }

    //STEP 5 - PROJECT
    for (int z = 1; z <= dimensions.z; z++)
    {
        for (int y = 1; y <= dimensions.y; y++)
        {
            for (int x = 1; x <= dimensions.x; x++)
            {
                data.IncomingForces.y = -1./3. * ((right.Direction.x - left.Direction.x) / dimensions.x + (top.Direction.y - bottom.Direction.y) / dimensions.x + (front.Direction.z - back.Direction.z) / dimensions.x);
                data.IncomingForces.x = 0.0;
            }
        }
    }

    for(int k = 0; k < 20; k++)
    {
        data.IncomingForces.x = (data.IncomingForces.y + (left.IncomingForces.x + right.IncomingForces.x + top.IncomingForces.x + bottom.IncomingForces.x + front.IncomingForces.x + back.IncomingForces.x)) / (6);
    }

    for (int z = 1; z <= dimensions.z; z++)
    {
        for (int y = 1; y <= dimensions.y; y++)
        {
            for (int x = 1; x <= dimensions.x; x++)
            {
                data.Direction.x -= 0.5 * dimensions.x * (right.IncomingForces.x - left.IncomingForces.x);
                data.Direction.y -= 0.5 * dimensions.y * (top.IncomingForces.x - bottom.IncomingForces.x);
                data.Direction.z -= 0.5 * dimensions.z * (front.IncomingForces.x - back.IncomingForces.x);
            }
        }
    }

    if (length(data.Direction) > maxMagnitude)
    {
        data.Direction = normalize(data.Direction) * maxMagnitude;
    }

    data.Col = lerp(minColor, maxColor, length(data.Direction));
    data.IncomingForces = float3(0,0,0);
    regions[id.x] = data;
}
